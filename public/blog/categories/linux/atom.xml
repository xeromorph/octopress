<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Code incomplete]]></title>
  <link href="http://xeromorph.herokuapp.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://xeromorph.herokuapp.com/"/>
  <updated>2012-10-01T09:04:58+11:00</updated>
  <id>http://xeromorph.herokuapp.com/</id>
  <author>
    <name><![CDATA[Aleksei Sergeev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing dynamic ip sets in firewall rules with iptables and ipset]]></title>
    <link href="http://xeromorph.herokuapp.com/blog/2012/09/24/managing-dynamic-ip-sets-in-firewall-rules-with-iptables-and-ipset/"/>
    <updated>2012-09-24T15:23:00+11:00</updated>
    <id>http://xeromorph.herokuapp.com/blog/2012/09/24/managing-dynamic-ip-sets-in-firewall-rules-with-iptables-and-ipset</id>
    <content type="html"><![CDATA[<p>There was a need to configure particular server to apply a set of iptables rules to dynamically comprised set of ip addresses. Trying to solve this problem using only plain old iptables rules can quickly become a mess, especially considering that large number of rules drastically diminishes performance of machine in general, set aside becoming a pain adding/removing entries from the list. Fortunately, there is a tool out there allowing us to solve this problem in a neat and tidy way, and it is called <a href="http://ipset.netfilter.org/">ipset</a>.</p>

<!--more-->


<h2>Problem statement</h2>

<p>We need server to have <strong>reboot persistent</strong> configuration of ipset and iptables rules, allowing us to easily manage list of whitelisted IPs eligible to access certain services (i.e. TCP connections on particular ports). Particularly, we should tune iptables <code>nf_conntrack_ftp</code> module to facilitate passive FTP connections on non-standart port (e.g. 2121).</p>

<p>In short, allow TCP connections on ports 22, 80, 139, 445, 2121 and UDP packets on port 53.</p>

<h2>Installation and initial setup</h2>

<p>First, make sure ipset is installed, otherwise install it using
<code>bash
$ sudo apt-get install ipset
</code></p>

<p>We are going to use <code>hash:ip</code> set type to store list of IP addresses for whitelisting. The advantage of this set type is that the amount of memory required to store entries dynamically expands and shrinks whether entries are added to or removed from list. <code>bitmap:ip</code> set type in contrary allocates memory for <code>maxelem</code> entries(which cannot exceed 65536, by the way) specified upon creation of set and thus we cannot add any entry if that amount is exceeded. For some use-cases this may just not be an issue, but you should be aware of this caveat.</p>

<p><code>bash creating ip set
$ sudo ipset create whitelisted hash:ip family inet hashsize 64 maxelem 4294967295
</code></p>

<p>Afterwards we can manage contents of created set from anywhere we find fit:
```bash</p>

<h1>adding ip to set</h1>

<p>$ sudo ipset add whitelisted 10.0.0.1</p>

<h1>removing ip from set</h1>

<p>$ sudo ipset del whitelisted 10.0.0.1</p>

<h1>or even deleting the whole set at once</h1>

<p>$ sudo ipset destroy whitelisted
```</p>

<p>Configuring iptables around our set and according to initial requirements would look like this:
<code>bash
$ sudo iptables-restore &lt;&lt;-EOF
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:whitelisted - [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -m set --match-set whitelist src -j whitelisted
-A whitelisted -p tcp -m multiport --dports 22,80,139,445,2121 -j ACCEPT
-A whitelisted -p udp --dport 53 -j ACCEPT
COMMIT
EOF
</code>
Here we set default policies for INPUT and FORWARD chains to DROP, then some basic setup for accepting related packets for established connections and loopback interface. Then packets with source addresses matching those in <strong>whitelisted</strong> ip set go into whitelisted chain, where we've defined required rules. As simple as that.</p>

<p>In order to allow passive ftp data connections through firewall, we need to load nf_conntrack_ftp kernel module on boot. By default, it monitors control ftp connections on port 21 detecting advertisements of data connection ports and dynamically allowing them in. Given we are using custom port 2121, we should add following line to <code>/etc/modules</code>
<code>
nf_conntrack_ftp ports=21,2121
</code></p>

<p>That concludes initial configuration, let's proceed with persisting it.</p>

<h2>Reboot persistence</h2>

<p>In Ubuntu there is a great evented-based init service geared up for our cause called <a href="http://upstart.ubuntu.com/">Upstart</a>. All we need is to create a few simple tasks to run on certain events on system.</p>

<p>First, we need some place safe to store iptables and ipset configurations. I prefer <code>/etc/iptables</code> folder, but it's up to you to choose, really. So, we create this folder with <code>sudo mkdir /etc/iptables</code> and make sure it's only writable for root user. Then we create task for saving configurations there.
<code>bash /etc/init/iptables_save.conf
description     "Save iptables rules on shutdown"
start on runlevel [016]
task
script
  ipset save &gt; /etc/iptables/ipset.save
  iptables-save &gt; /etc/iptables/iptables.save
end script
</code></p>

<p>Here we say this task is to run whether server is rebooting or shutting down and it's simply exporting settings to corresponding files.</p>

<p>The following tasks are designed to restore this settings back up on startup of a server.
<code>bash /etc/init/iptables_restore.conf
description     "Apply iptables rules on startup"
start on startup and starting networking
task
script
  iptables-restore &lt; /etc/iptables/iptables.save
end script
</code></p>

<p><code>bash /etc/init/ipset_restore.conf
description    "Apply ipset rules un startup"
start on startup and starting iptables_restore
task
script
  ipset restore &lt; /etc/iptables/ipset.save
end script
</code></p>

<p>Important caveat here is that we start <code>ipset_restore</code>  on <code>starting iptables_restore</code> meaning <em>right before</em> it. Restoring iptables earlier would fail because of referencing rule with ipset set not yet created/imported.</p>

<p>Finally, we should run <code>sudo initctl reload-configuration</code> for upstart to detect our changes and configure itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subduing Logitech mice]]></title>
    <link href="http://xeromorph.herokuapp.com/blog/2012/07/05/subduing-logitech-mice/"/>
    <updated>2012-07-05T13:51:00+11:00</updated>
    <id>http://xeromorph.herokuapp.com/blog/2012/07/05/subduing-logitech-mice</id>
    <content type="html"><![CDATA[<p>Logitech support for their products on Linux platform may be discouraging for casual users. Recently I faced this problem myself. In Windows environment I used to max out my lovely G3 mouses dpi through vendored Logitech software, turn off acceleration and set sensitivity low. That's what I got pretty strong habit for. I also switched off that nasty prone to random triggering <strong>quickly change dpi</strong> button and was quite happy with that setup.</p>

<p>On my freshly installed Ubuntu 12.04 though nothing seemed to work obviously. However, I managed to achieve almost identical behaviour, thus going to share my findings.</p>

<!--more-->


<h2>Tackling some mice</h2>

<p>First of all, I needed to manage dpi and buttons behaviour in an apt manner. Fortunately, some valiant reverse-engineering folks produced handy little python script for that matter. <a href="http://code.google.com/p/g5mouse/">G5Mouse</a> works with hiddev driver directly to read and set device flags. Following command let me achieve required dpi and turn off that nifty button.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>g5mouse.py -d 2000 -n /dev/usb/hiddev0
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Along with that change mouse movement becomes hectic. The way to diminish sensitivity and acceleration rates of cursor is through <strong>xinput</strong>. Firstly, we need to determine <em>id</em> of the device. Running <code>xinput</code> should produce something like the following:</p>

<p>```bash
$ xinput
⎡ Virtual core pointer                      id=2[master pointer    (3)]
⎜   ↳ Virtual core XTEST pointer                id=4[slave  p ointer  (2)]
⎜   ↳ Logitech USB Gaming Mouse                 id=10[  slave  pointer  (2)]
⎣ Virtual core keyboard                     id=3  [master keyboard (2)]</p>

<pre><code>↳ Virtual core XTEST keyboard               id=5[slave  keyboard (3)]
↳ Power Button                                id=6[slave  keyboard (3)]
↳ Power Button                              id=7[slave  keyboard (3)]
↳ DATACOMP SteelS쀁̄Љ̒DA  TA              id=8[slave  keyboard (3)]
↳ DATACOMP SteelS쀁̄Ð̒DATA
</code></pre>

<p>```</p>

<p>Here we can see <em>Logitech USB Gaming Mouse</em> going along with <code>id=10</code>. Great, that's what we need for the next few commands:</p>

<p><code>bash
$ xinput set-prop 10 "Device Accel Velocity Scaling" 0.000001
$ xinput set-prop 10 "Device Accel Adaptive Deceleration" 1.5
$ xinput set-prop 10 "Device Accel Constant Deceleration" 1.5
</code>
All those values are experimental and personal preference.</p>

<p>Am I supposed to pound these commands every single time I boot or resume from sleep|hibernation? In Linux? No way.</p>

<h2>Automating with Upstart</h2>

<p><a href="http://upstart.ubuntu.com/cookbook/">Upstart</a> is a robust event-driven init daemon adopted in Ubuntu for a long time now. Its event-based nature greatly facilitates the ease of my automation setup.</p>

<p>Here I moved <code>g5mouse.py</code> script into <code>/usr/bin</code> directory thus I can call it directly:</p>

<p><code>bash
$ sudo cp g5mouse.py /usr/bin/g5mouse
$ sudo chmod 755 /usr/bin/g5mouse
</code></p>

<p>Then I created <code>g5mouse.conf</code> file in <code>/etc/init</code> directory containing this:</p>

<p>```bash /etc/init/g5mouse.conf
start on login-session-start or resume
task</p>

<p>script
  g5mouse -d 2000 -n /dev/usb/hiddev0
end script
<code>``
and ran</code>sudo initctl reload-configuration`.</p>

<p>Here's the thing. This task starts whenever events <code>login-session-start</code> or <code>resume</code> are emitted. Former is a stock system event occuring once X display manager is started. We ain't gonna use our mouse without graphical environment, right? Latter is a custom event, emitted <em>manually</em> by command <code>initctl emit --no-wait resume</code>. Why do we need it? Well, it was discovered, that driver settings don't persist on sleep/resume, thus I needed some utility to retain them. And here <a href="https://wiki.archlinux.org/index.php/Pm-utils">pm-utils</a> kicks in.</p>

<p>Scripts, located in <code>/etc/pm/sleep.d</code>, are executed whenever system in going down in suspend or resumes its operation. Upon <em>resume from RAM</em> scripts receive <code>resume</code> as the first parameter. Ergo we can place there something like this:</p>

<p>```bash /etc/pm/sleep.d/upstart-event-emitter</p>

<h1>!/bin/bash</h1>

<p>case $1 in
  resume|thaw)</p>

<pre><code>initctl emit --no-wait resume
;;
</code></pre>

<p>esac
<code>``
and</code>chmod +x` it.</p>

<p>Finally, we need to automatically apply user-specific <strong>xinput</strong> values upon each log in. To do this, we create the following files:</p>

<p>```bash ~/bin/xinput.sh</p>

<h1>!/bin/bash</h1>

<p>xinput set-prop 10 "Device Accel Velocity Scaling" 0.000001
xinput set-prop 10 "Device Accel Adaptive Deceleration" 1.5
xinput set-prop 10 "Device Accel Constant Deceleration" 1.5
```</p>

<p><code>bash ~/.config/autostart/xinput.desktop
[Desktop Entry]
Type=Application
Exec=~/bin/xinput.sh
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[en]=mouse xinput
Name=mouse xinput
Comment[en]=
Comment=
</code></p>

<p>and <code>chmod +x ~/bin/xinput.sh</code>.</p>

<p>Now we're all set and ready to ride some mice.</p>
]]></content>
  </entry>
  
</feed>
